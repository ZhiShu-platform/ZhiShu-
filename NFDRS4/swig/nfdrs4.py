# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nfdrs4
else:
    import _nfdrs4

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nfdrs4.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _nfdrs4.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _nfdrs4.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _nfdrs4.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _nfdrs4.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _nfdrs4.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _nfdrs4.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _nfdrs4.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _nfdrs4.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _nfdrs4.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _nfdrs4.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _nfdrs4.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _nfdrs4.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _nfdrs4.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _nfdrs4.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _nfdrs4.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _nfdrs4.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _nfdrs4:
_nfdrs4.SwigPyIterator_swigregister(SwigPyIterator)

DFM_State_None = _nfdrs4.DFM_State_None
DFM_State_Adsorption = _nfdrs4.DFM_State_Adsorption
DFM_State_Desorption = _nfdrs4.DFM_State_Desorption
DFM_State_Condensation1 = _nfdrs4.DFM_State_Condensation1
DFM_State_Condensation2 = _nfdrs4.DFM_State_Condensation2
DFM_State_Evaporation = _nfdrs4.DFM_State_Evaporation
DFM_State_Rainfall1 = _nfdrs4.DFM_State_Rainfall1
DFM_State_Rainfall2 = _nfdrs4.DFM_State_Rainfall2
DFM_State_Rainstorm = _nfdrs4.DFM_State_Rainstorm
DFM_State_Stagnation = _nfdrs4.DFM_State_Stagnation
DFM_State_Error = _nfdrs4.DFM_State_Error
class DeadFuelMoisture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _nfdrs4.delete_DeadFuelMoisture

    def __init__(self, *args):
        _nfdrs4.DeadFuelMoisture_swiginit(self, _nfdrs4.new_DeadFuelMoisture(*args))

    def Const_assign_DeadFuelMoisture(self, rhs: "DeadFuelMoisture") -> "DeadFuelMoisture const &":
        return _nfdrs4.DeadFuelMoisture_Const_assign_DeadFuelMoisture(self, rhs)

    def className(self) -> "char const *":
        return _nfdrs4.DeadFuelMoisture_className(self)

    @staticmethod
    def createDeadFuelMoisture1(*args) -> "DeadFuelMoisture *":
        return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1(*args)

    @staticmethod
    def createDeadFuelMoisture10(*args) -> "DeadFuelMoisture *":
        return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture10(*args)

    @staticmethod
    def createDeadFuelMoisture100(*args) -> "DeadFuelMoisture *":
        return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture100(*args)

    @staticmethod
    def createDeadFuelMoisture1000(*args) -> "DeadFuelMoisture *":
        return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1000(*args)

    @staticmethod
    def deriveAdsorptionRate(radius: "double") -> "double":
        return _nfdrs4.DeadFuelMoisture_deriveAdsorptionRate(radius)

    @staticmethod
    def deriveDiffusivitySteps(radius: "double") -> "int":
        return _nfdrs4.DeadFuelMoisture_deriveDiffusivitySteps(radius)

    @staticmethod
    def deriveMoistureSteps(radius: "double") -> "int":
        return _nfdrs4.DeadFuelMoisture_deriveMoistureSteps(radius)

    @staticmethod
    def derivePlanarHeatTransferRate(radius: "double") -> "double":
        return _nfdrs4.DeadFuelMoisture_derivePlanarHeatTransferRate(radius)

    @staticmethod
    def deriveRainfallRunoffFactor(radius: "double") -> "double":
        return _nfdrs4.DeadFuelMoisture_deriveRainfallRunoffFactor(radius)

    @staticmethod
    def deriveStickNodes(radius: "double") -> "int":
        return _nfdrs4.DeadFuelMoisture_deriveStickNodes(radius)

    @staticmethod
    def uniformRandom(min: "double", max: "double") -> "double":
        return _nfdrs4.DeadFuelMoisture_uniformRandom(min, max)

    def initializeEnvironment(self, *args) -> "void":
        return _nfdrs4.DeadFuelMoisture_initializeEnvironment(self, *args)

    def update(self, *args) -> "bool":
        return _nfdrs4.DeadFuelMoisture_update(self, *args)

    def zero(self) -> "void":
        return _nfdrs4.DeadFuelMoisture_zero(self)

    def elapsedTime(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_elapsedTime(self)

    def initialized(self) -> "bool":
        return _nfdrs4.DeadFuelMoisture_initialized(self)

    def name(self) -> "std::string":
        return _nfdrs4.DeadFuelMoisture_name(self)

    def meanMoisture(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_meanMoisture(self)

    def meanWtdMoisture(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_meanWtdMoisture(self)

    def medianRadialMoisture(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_medianRadialMoisture(self)

    def meanWtdTemperature(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_meanWtdTemperature(self)

    def pptRate(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_pptRate(self)

    def state(self) -> "int":
        return _nfdrs4.DeadFuelMoisture_state(self)

    def stateName(self) -> "char const *":
        return _nfdrs4.DeadFuelMoisture_stateName(self)

    def surfaceMoisture(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_surfaceMoisture(self)

    def surfaceTemperature(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_surfaceTemperature(self)

    def updates(self) -> "long":
        return _nfdrs4.DeadFuelMoisture_updates(self)

    def adsorptionRate(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_adsorptionRate(self)

    def desorptionRate(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_desorptionRate(self)

    def diffusivitySteps(self) -> "int":
        return _nfdrs4.DeadFuelMoisture_diffusivitySteps(self)

    def maximumLocalMoisture(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_maximumLocalMoisture(self)

    def moistureSteps(self) -> "int":
        return _nfdrs4.DeadFuelMoisture_moistureSteps(self)

    def planarHeatTransferRate(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_planarHeatTransferRate(self)

    def rainfallRunoffFactor(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_rainfallRunoffFactor(self)

    def stickDensity(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_stickDensity(self)

    def stickLength(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_stickLength(self)

    def stickNodes(self) -> "int":
        return _nfdrs4.DeadFuelMoisture_stickNodes(self)

    def waterFilmContribution(self) -> "double":
        return _nfdrs4.DeadFuelMoisture_waterFilmContribution(self)

    def initializeStick(self) -> "void":
        return _nfdrs4.DeadFuelMoisture_initializeStick(self)

    def setAdsorptionRate(self, adsorptionRate: "double") -> "void":
        return _nfdrs4.DeadFuelMoisture_setAdsorptionRate(self, adsorptionRate)

    def setAllowRainstorm(self, allow: "bool"=True) -> "void":
        return _nfdrs4.DeadFuelMoisture_setAllowRainstorm(self, allow)

    def setAllowRainfall2(self, allow: "bool"=True) -> "void":
        return _nfdrs4.DeadFuelMoisture_setAllowRainfall2(self, allow)

    def setDesorptionRate(self, desorptionRate: "double"=0.06) -> "void":
        return _nfdrs4.DeadFuelMoisture_setDesorptionRate(self, desorptionRate)

    def setDiffusivitySteps(self, diffusivitySteps: "int") -> "void":
        return _nfdrs4.DeadFuelMoisture_setDiffusivitySteps(self, diffusivitySteps)

    def setMaximumLocalMoisture(self, localMaxMc: "double"=0.6) -> "void":
        return _nfdrs4.DeadFuelMoisture_setMaximumLocalMoisture(self, localMaxMc)

    def setMoistureSteps(self, moistureSteps: "int") -> "void":
        return _nfdrs4.DeadFuelMoisture_setMoistureSteps(self, moistureSteps)

    def setPertubateColumn(self, pertubate: "bool"=True) -> "void":
        return _nfdrs4.DeadFuelMoisture_setPertubateColumn(self, pertubate)

    def setPlanarHeatTransferRate(self, planarHeatTransferRate: "double") -> "void":
        return _nfdrs4.DeadFuelMoisture_setPlanarHeatTransferRate(self, planarHeatTransferRate)

    def setRainfallRunoffFactor(self, rainfallRunoffFactor: "double") -> "void":
        return _nfdrs4.DeadFuelMoisture_setRainfallRunoffFactor(self, rainfallRunoffFactor)

    def setRandomSeed(self, randseed: "int"=0) -> "void":
        return _nfdrs4.DeadFuelMoisture_setRandomSeed(self, randseed)

    def setRampRai0(self, ramp: "bool"=True) -> "void":
        return _nfdrs4.DeadFuelMoisture_setRampRai0(self, ramp)

    def setStickDensity(self, stickDensity: "double"=0.4) -> "void":
        return _nfdrs4.DeadFuelMoisture_setStickDensity(self, stickDensity)

    def setStickLength(self, stickLength: "double"=41.0) -> "void":
        return _nfdrs4.DeadFuelMoisture_setStickLength(self, stickLength)

    def setStickNodes(self, stickNodes: "int"=11) -> "void":
        return _nfdrs4.DeadFuelMoisture_setStickNodes(self, stickNodes)

    def setWaterFilmContribution(self, waterFilm: "double"=0.0) -> "void":
        return _nfdrs4.DeadFuelMoisture_setWaterFilmContribution(self, waterFilm)

    def setMoisture(self, initFM: "float") -> "void":
        return _nfdrs4.DeadFuelMoisture_setMoisture(self, initFM)

    def eqmc(self, fTemp: "double", fRH: "double") -> "double":
        return _nfdrs4.DeadFuelMoisture_eqmc(self, fTemp, fRH)

    def initializeParameters(self, radius: "double", name: "std::string const &") -> "void":
        return _nfdrs4.DeadFuelMoisture_initializeParameters(self, radius, name)

    def GetState(self) -> "DFMCalcState":
        return _nfdrs4.DeadFuelMoisture_GetState(self)

    def SetState(self, state: "DFMCalcState") -> "bool":
        return _nfdrs4.DeadFuelMoisture_SetState(self, state)

# Register DeadFuelMoisture in _nfdrs4:
_nfdrs4.DeadFuelMoisture_swigregister(DeadFuelMoisture)

def DeadFuelMoisture_createDeadFuelMoisture1(*args) -> "DeadFuelMoisture *":
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1(*args)

def DeadFuelMoisture_createDeadFuelMoisture10(*args) -> "DeadFuelMoisture *":
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture10(*args)

def DeadFuelMoisture_createDeadFuelMoisture100(*args) -> "DeadFuelMoisture *":
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture100(*args)

def DeadFuelMoisture_createDeadFuelMoisture1000(*args) -> "DeadFuelMoisture *":
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1000(*args)

def DeadFuelMoisture_deriveAdsorptionRate(radius: "double") -> "double":
    return _nfdrs4.DeadFuelMoisture_deriveAdsorptionRate(radius)

def DeadFuelMoisture_deriveDiffusivitySteps(radius: "double") -> "int":
    return _nfdrs4.DeadFuelMoisture_deriveDiffusivitySteps(radius)

def DeadFuelMoisture_deriveMoistureSteps(radius: "double") -> "int":
    return _nfdrs4.DeadFuelMoisture_deriveMoistureSteps(radius)

def DeadFuelMoisture_derivePlanarHeatTransferRate(radius: "double") -> "double":
    return _nfdrs4.DeadFuelMoisture_derivePlanarHeatTransferRate(radius)

def DeadFuelMoisture_deriveRainfallRunoffFactor(radius: "double") -> "double":
    return _nfdrs4.DeadFuelMoisture_deriveRainfallRunoffFactor(radius)

def DeadFuelMoisture_deriveStickNodes(radius: "double") -> "int":
    return _nfdrs4.DeadFuelMoisture_deriveStickNodes(radius)

def DeadFuelMoisture_uniformRandom(min: "double", max: "double") -> "double":
    return _nfdrs4.DeadFuelMoisture_uniformRandom(min, max)

NOVALUE = _nfdrs4.NOVALUE
RADPERDAY = _nfdrs4.RADPERDAY
RADPERDEG = _nfdrs4.RADPERDEG
MINDECL = _nfdrs4.MINDECL
SECPERRAD = _nfdrs4.SECPERRAD
DAYSOFF = _nfdrs4.DAYSOFF
class LiveFuelMoisture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.LiveFuelMoisture_swiginit(self, _nfdrs4.new_LiveFuelMoisture(*args))

    def Initialize(self, Lat: "double", IsHerb: "bool", IsAnnual: "bool") -> "void":
        return _nfdrs4.LiveFuelMoisture_Initialize(self, Lat, IsHerb, IsAnnual)

    def SetLimits(self, arg2: "double", arg3: "double", arg4: "double", arg5: "double", arg6: "double", arg7: "double", arg8: "double", arg9: "double") -> "void":
        return _nfdrs4.LiveFuelMoisture_SetLimits(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    def Update(self, TempF: "double", MaxTempF: "double", MinTempF: "double", RH: "double", minRH: "double", Jday: "int", RTPrcp: "double", thisTime: "time_t") -> "void":
        return _nfdrs4.LiveFuelMoisture_Update(self, TempF, MaxTempF, MinTempF, RH, minRH, Jday, RTPrcp, thisTime)

    def SetMAPeriod(self, MAPeriod: "unsigned int") -> "void":
        return _nfdrs4.LiveFuelMoisture_SetMAPeriod(self, MAPeriod)

    def SetLFMParameters(self, MaxGSI: "double", GreenupThreshold: "double", MinLFMVal: "double", MaxLFMVal: "double") -> "void":
        return _nfdrs4.LiveFuelMoisture_SetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal)

    def GetLFMParameters(self, MaxGSI: "double *", GreenupThreshold: "double *", MinLFMVal: "double *", MaxLFMVal: "double *") -> "void":
        return _nfdrs4.LiveFuelMoisture_GetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal)

    def SetNumPrecipDays(self, numDays: "int") -> "void":
        return _nfdrs4.LiveFuelMoisture_SetNumPrecipDays(self, numDays)

    def GetNumPrecipDays(self) -> "int":
        return _nfdrs4.LiveFuelMoisture_GetNumPrecipDays(self)

    def GetMoisture(self, SnowDay: "bool"=False) -> "double":
        return _nfdrs4.LiveFuelMoisture_GetMoisture(self, SnowDay)

    def CalcRunningAvgGSI(self) -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcRunningAvgGSI(self)

    def CalcRunningAvgHerbFM(self, SnowDay: "bool"=False) -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcRunningAvgHerbFM(self, SnowDay)

    def ResetHerbState(self) -> "void":
        return _nfdrs4.LiveFuelMoisture_ResetHerbState(self)

    def CalcRunningAvgWoodyFM(self, SnowDay: "bool"=False) -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcRunningAvgWoodyFM(self, SnowDay)

    def CalcGSI(self, minRH: "double", maxTempF: "double", minTempF: "double", RTPrcp: "double", lat: "double", doy: "int") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcGSI(self, minRH, maxTempF, minTempF, RTPrcp, lat, doy)

    def CalcGSI_VPDAvg(self, RH: "double", TempF: "double", maxTempF: "double", minTempF: "double", RTPrcp: "double", lat: "double", doy: "int") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcGSI_VPDAvg(self, RH, TempF, maxTempF, minTempF, RTPrcp, lat, doy)

    def GetTminInd(self, Tmin: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_GetTminInd(self, Tmin)

    def GetVPDInd(self, VPD: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_GetVPDInd(self, VPD)

    def GetDaylInd(self, Dayl: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_GetDaylInd(self, Dayl)

    def GetPrcpInd(self, RTPrcp: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_GetPrcpInd(self, RTPrcp)

    def CalcDayl(self, lat: "double", yday: "int") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcDayl(self, lat, yday)

    def CalcVPDavg(self, TempDewF: "double", TempAvgF: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcVPDavg(self, TempDewF, TempAvgF)

    def CalcVPD(self, RH: "double", TempF: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcVPD(self, RH, TempF)

    def CalcDPT(self, tempF: "double", RH: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcDPT(self, tempF, RH)

    def CalcVP(self, tempF: "double") -> "double":
        return _nfdrs4.LiveFuelMoisture_CalcVP(self, tempF)

    def GetMaxGSI(self) -> "double":
        return _nfdrs4.LiveFuelMoisture_GetMaxGSI(self)

    def GetGreenupThreshold(self) -> "double":
        return _nfdrs4.LiveFuelMoisture_GetGreenupThreshold(self)

    def GetMinLFMVal(self) -> "double":
        return _nfdrs4.LiveFuelMoisture_GetMinLFMVal(self)

    def GetMaxLFMVal(self) -> "double":
        return _nfdrs4.LiveFuelMoisture_GetMaxLFMVal(self)

    def SetUseVPDAvg(self, set: "bool") -> "void":
        return _nfdrs4.LiveFuelMoisture_SetUseVPDAvg(self, set)

    def GetUseVPDAvg(self) -> "bool":
        return _nfdrs4.LiveFuelMoisture_GetUseVPDAvg(self)

    def GetIsAnnual(self) -> "bool":
        return _nfdrs4.LiveFuelMoisture_GetIsAnnual(self)

    def GetState(self) -> "LFMCalcState":
        return _nfdrs4.LiveFuelMoisture_GetState(self)

    def SetState(self, state: "LFMCalcState") -> "bool":
        return _nfdrs4.LiveFuelMoisture_SetState(self, state)

    def SetUseRTPrecip(self, set: "bool") -> "void":
        return _nfdrs4.LiveFuelMoisture_SetUseRTPrecip(self, set)

    def GetUseRTPrecip(self) -> "bool":
        return _nfdrs4.LiveFuelMoisture_GetUseRTPrecip(self)
    __swig_destroy__ = _nfdrs4.delete_LiveFuelMoisture

# Register LiveFuelMoisture in _nfdrs4:
_nfdrs4.LiveFuelMoisture_swigregister(LiveFuelMoisture)

class DFMCalcState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.DFMCalcState_swiginit(self, _nfdrs4.new_DFMCalcState(*args))
    __swig_destroy__ = _nfdrs4.delete_DFMCalcState

    def ReadState(self, _in: "FILE *") -> "bool":
        return _nfdrs4.DFMCalcState_ReadState(self, _in)

    def SaveState(self, out: "FILE *") -> "bool":
        return _nfdrs4.DFMCalcState_SaveState(self, out)
    m_JDay = property(_nfdrs4.DFMCalcState_m_JDay_get, _nfdrs4.DFMCalcState_m_JDay_set)
    m_Year = property(_nfdrs4.DFMCalcState_m_Year_get, _nfdrs4.DFMCalcState_m_Year_set)
    m_Month = property(_nfdrs4.DFMCalcState_m_Month_get, _nfdrs4.DFMCalcState_m_Month_set)
    m_Day = property(_nfdrs4.DFMCalcState_m_Day_get, _nfdrs4.DFMCalcState_m_Day_set)
    m_Hour = property(_nfdrs4.DFMCalcState_m_Hour_get, _nfdrs4.DFMCalcState_m_Hour_set)
    m_Min = property(_nfdrs4.DFMCalcState_m_Min_get, _nfdrs4.DFMCalcState_m_Min_set)
    m_Sec = property(_nfdrs4.DFMCalcState_m_Sec_get, _nfdrs4.DFMCalcState_m_Sec_set)
    m_obstime = property(_nfdrs4.DFMCalcState_m_obstime_get, _nfdrs4.DFMCalcState_m_obstime_set)
    m_bp1 = property(_nfdrs4.DFMCalcState_m_bp1_get, _nfdrs4.DFMCalcState_m_bp1_set)
    m_et = property(_nfdrs4.DFMCalcState_m_et_get, _nfdrs4.DFMCalcState_m_et_set)
    m_ha1 = property(_nfdrs4.DFMCalcState_m_ha1_get, _nfdrs4.DFMCalcState_m_ha1_set)
    m_rc1 = property(_nfdrs4.DFMCalcState_m_rc1_get, _nfdrs4.DFMCalcState_m_rc1_set)
    m_sv1 = property(_nfdrs4.DFMCalcState_m_sv1_get, _nfdrs4.DFMCalcState_m_sv1_set)
    m_ta1 = property(_nfdrs4.DFMCalcState_m_ta1_get, _nfdrs4.DFMCalcState_m_ta1_set)
    m_hf = property(_nfdrs4.DFMCalcState_m_hf_get, _nfdrs4.DFMCalcState_m_hf_set)
    m_wsa = property(_nfdrs4.DFMCalcState_m_wsa_get, _nfdrs4.DFMCalcState_m_wsa_set)
    m_rdur = property(_nfdrs4.DFMCalcState_m_rdur_get, _nfdrs4.DFMCalcState_m_rdur_set)
    m_ra1 = property(_nfdrs4.DFMCalcState_m_ra1_get, _nfdrs4.DFMCalcState_m_ra1_set)
    m_nodes = property(_nfdrs4.DFMCalcState_m_nodes_get, _nfdrs4.DFMCalcState_m_nodes_set)
    m_t = property(_nfdrs4.DFMCalcState_m_t_get, _nfdrs4.DFMCalcState_m_t_set)
    m_s = property(_nfdrs4.DFMCalcState_m_s_get, _nfdrs4.DFMCalcState_m_s_set)
    m_d = property(_nfdrs4.DFMCalcState_m_d_get, _nfdrs4.DFMCalcState_m_d_set)
    m_w = property(_nfdrs4.DFMCalcState_m_w_get, _nfdrs4.DFMCalcState_m_w_set)

# Register DFMCalcState in _nfdrs4:
_nfdrs4.DFMCalcState_swigregister(DFMCalcState)

class LFMCalcState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.LFMCalcState_swiginit(self, _nfdrs4.new_LFMCalcState(*args))
    __swig_destroy__ = _nfdrs4.delete_LFMCalcState

    def ReadState(self, _in: "FILE *") -> "bool":
        return _nfdrs4.LFMCalcState_ReadState(self, _in)

    def SaveState(self, out: "FILE *") -> "bool":
        return _nfdrs4.LFMCalcState_SaveState(self, out)
    m_lastUpdateTime = property(_nfdrs4.LFMCalcState_m_lastUpdateTime_get, _nfdrs4.LFMCalcState_m_lastUpdateTime_set)
    m_UseVPDAvg = property(_nfdrs4.LFMCalcState_m_UseVPDAvg_get, _nfdrs4.LFMCalcState_m_UseVPDAvg_set)
    m_IsHerb = property(_nfdrs4.LFMCalcState_m_IsHerb_get, _nfdrs4.LFMCalcState_m_IsHerb_set)
    m_IsAnnual = property(_nfdrs4.LFMCalcState_m_IsAnnual_get, _nfdrs4.LFMCalcState_m_IsAnnual_set)
    m_LFIdaysAvg = property(_nfdrs4.LFMCalcState_m_LFIdaysAvg_get, _nfdrs4.LFMCalcState_m_LFIdaysAvg_set)
    m_nDaysPrecip = property(_nfdrs4.LFMCalcState_m_nDaysPrecip_get, _nfdrs4.LFMCalcState_m_nDaysPrecip_set)
    m_Lat = property(_nfdrs4.LFMCalcState_m_Lat_get, _nfdrs4.LFMCalcState_m_Lat_set)
    m_TminMin = property(_nfdrs4.LFMCalcState_m_TminMin_get, _nfdrs4.LFMCalcState_m_TminMin_set)
    m_TminMax = property(_nfdrs4.LFMCalcState_m_TminMax_get, _nfdrs4.LFMCalcState_m_TminMax_set)
    m_VPDMin = property(_nfdrs4.LFMCalcState_m_VPDMin_get, _nfdrs4.LFMCalcState_m_VPDMin_set)
    m_VPDMax = property(_nfdrs4.LFMCalcState_m_VPDMax_get, _nfdrs4.LFMCalcState_m_VPDMax_set)
    m_DaylenMin = property(_nfdrs4.LFMCalcState_m_DaylenMin_get, _nfdrs4.LFMCalcState_m_DaylenMin_set)
    m_DaylenMax = property(_nfdrs4.LFMCalcState_m_DaylenMax_get, _nfdrs4.LFMCalcState_m_DaylenMax_set)
    m_MaxGSI = property(_nfdrs4.LFMCalcState_m_MaxGSI_get, _nfdrs4.LFMCalcState_m_MaxGSI_set)
    m_GreenupThreshold = property(_nfdrs4.LFMCalcState_m_GreenupThreshold_get, _nfdrs4.LFMCalcState_m_GreenupThreshold_set)
    m_MaxLFMVal = property(_nfdrs4.LFMCalcState_m_MaxLFMVal_get, _nfdrs4.LFMCalcState_m_MaxLFMVal_set)
    m_MinLFMVal = property(_nfdrs4.LFMCalcState_m_MinLFMVal_get, _nfdrs4.LFMCalcState_m_MinLFMVal_set)
    m_Slope = property(_nfdrs4.LFMCalcState_m_Slope_get, _nfdrs4.LFMCalcState_m_Slope_set)
    m_Intercept = property(_nfdrs4.LFMCalcState_m_Intercept_get, _nfdrs4.LFMCalcState_m_Intercept_set)
    m_hasGreenedUpThisYear = property(_nfdrs4.LFMCalcState_m_hasGreenedUpThisYear_get, _nfdrs4.LFMCalcState_m_hasGreenedUpThisYear_set)
    m_hasExceeded120ThisYear = property(_nfdrs4.LFMCalcState_m_hasExceeded120ThisYear_get, _nfdrs4.LFMCalcState_m_hasExceeded120ThisYear_set)
    m_canIncreaseHerb = property(_nfdrs4.LFMCalcState_m_canIncreaseHerb_get, _nfdrs4.LFMCalcState_m_canIncreaseHerb_set)
    lastHerbFM = property(_nfdrs4.LFMCalcState_lastHerbFM_get, _nfdrs4.LFMCalcState_lastHerbFM_set)
    m_useRTPrecip = property(_nfdrs4.LFMCalcState_m_useRTPrecip_get, _nfdrs4.LFMCalcState_m_useRTPrecip_set)
    m_pcpMin = property(_nfdrs4.LFMCalcState_m_pcpMin_get, _nfdrs4.LFMCalcState_m_pcpMin_set)
    m_pcpMax = property(_nfdrs4.LFMCalcState_m_pcpMax_get, _nfdrs4.LFMCalcState_m_pcpMax_set)
    m_qGSI = property(_nfdrs4.LFMCalcState_m_qGSI_get, _nfdrs4.LFMCalcState_m_qGSI_set)

# Register LFMCalcState in _nfdrs4:
_nfdrs4.LFMCalcState_swigregister(LFMCalcState)

class NFDRS4State(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.NFDRS4State_swiginit(self, _nfdrs4.new_NFDRS4State(*args))
    __swig_destroy__ = _nfdrs4.delete_NFDRS4State

    def LoadState(self, fileName: "std::string") -> "bool":
        return _nfdrs4.NFDRS4State_LoadState(self, fileName)

    def SaveState(self, fileName: "std::string") -> "bool":
        return _nfdrs4.NFDRS4State_SaveState(self, fileName)
    m_NFDRSVersion = property(_nfdrs4.NFDRS4State_m_NFDRSVersion_get, _nfdrs4.NFDRS4State_m_NFDRSVersion_set)
    fm1State = property(_nfdrs4.NFDRS4State_fm1State_get, _nfdrs4.NFDRS4State_fm1State_set)
    fm10State = property(_nfdrs4.NFDRS4State_fm10State_get, _nfdrs4.NFDRS4State_fm10State_set)
    fm100State = property(_nfdrs4.NFDRS4State_fm100State_get, _nfdrs4.NFDRS4State_fm100State_set)
    fm1000State = property(_nfdrs4.NFDRS4State_fm1000State_get, _nfdrs4.NFDRS4State_fm1000State_set)
    herbState = property(_nfdrs4.NFDRS4State_herbState_get, _nfdrs4.NFDRS4State_herbState_set)
    woodyState = property(_nfdrs4.NFDRS4State_woodyState_get, _nfdrs4.NFDRS4State_woodyState_set)
    m_Lat = property(_nfdrs4.NFDRS4State_m_Lat_get, _nfdrs4.NFDRS4State_m_Lat_set)
    m_YesterdayJDay = property(_nfdrs4.NFDRS4State_m_YesterdayJDay_get, _nfdrs4.NFDRS4State_m_YesterdayJDay_set)
    m_SlopeClass = property(_nfdrs4.NFDRS4State_m_SlopeClass_get, _nfdrs4.NFDRS4State_m_SlopeClass_set)
    m_FuelModel = property(_nfdrs4.NFDRS4State_m_FuelModel_get, _nfdrs4.NFDRS4State_m_FuelModel_set)
    m_MC1 = property(_nfdrs4.NFDRS4State_m_MC1_get, _nfdrs4.NFDRS4State_m_MC1_set)
    m_MC10 = property(_nfdrs4.NFDRS4State_m_MC10_get, _nfdrs4.NFDRS4State_m_MC10_set)
    m_MC100 = property(_nfdrs4.NFDRS4State_m_MC100_get, _nfdrs4.NFDRS4State_m_MC100_set)
    m_MC1000 = property(_nfdrs4.NFDRS4State_m_MC1000_get, _nfdrs4.NFDRS4State_m_MC1000_set)
    m_MCWOOD = property(_nfdrs4.NFDRS4State_m_MCWOOD_get, _nfdrs4.NFDRS4State_m_MCWOOD_set)
    m_MCHERB = property(_nfdrs4.NFDRS4State_m_MCHERB_get, _nfdrs4.NFDRS4State_m_MCHERB_set)
    m_PrevYear = property(_nfdrs4.NFDRS4State_m_PrevYear_get, _nfdrs4.NFDRS4State_m_PrevYear_set)
    m_KBDI = property(_nfdrs4.NFDRS4State_m_KBDI_get, _nfdrs4.NFDRS4State_m_KBDI_set)
    m_YKBDI = property(_nfdrs4.NFDRS4State_m_YKBDI_get, _nfdrs4.NFDRS4State_m_YKBDI_set)
    m_StartKBDI = property(_nfdrs4.NFDRS4State_m_StartKBDI_get, _nfdrs4.NFDRS4State_m_StartKBDI_set)
    m_KBDIThreshold = property(_nfdrs4.NFDRS4State_m_KBDIThreshold_get, _nfdrs4.NFDRS4State_m_KBDIThreshold_set)
    m_CummPrecip = property(_nfdrs4.NFDRS4State_m_CummPrecip_get, _nfdrs4.NFDRS4State_m_CummPrecip_set)
    m_AvgPrecip = property(_nfdrs4.NFDRS4State_m_AvgPrecip_get, _nfdrs4.NFDRS4State_m_AvgPrecip_set)
    m_UseLoadTransfer = property(_nfdrs4.NFDRS4State_m_UseLoadTransfer_get, _nfdrs4.NFDRS4State_m_UseLoadTransfer_set)
    m_UseCuring = property(_nfdrs4.NFDRS4State_m_UseCuring_get, _nfdrs4.NFDRS4State_m_UseCuring_set)
    m_FuelTemperature = property(_nfdrs4.NFDRS4State_m_FuelTemperature_get, _nfdrs4.NFDRS4State_m_FuelTemperature_set)
    m_BI = property(_nfdrs4.NFDRS4State_m_BI_get, _nfdrs4.NFDRS4State_m_BI_set)
    m_ERC = property(_nfdrs4.NFDRS4State_m_ERC_get, _nfdrs4.NFDRS4State_m_ERC_set)
    m_SC = property(_nfdrs4.NFDRS4State_m_SC_get, _nfdrs4.NFDRS4State_m_SC_set)
    m_IC = property(_nfdrs4.NFDRS4State_m_IC_get, _nfdrs4.NFDRS4State_m_IC_set)
    m_GSI = property(_nfdrs4.NFDRS4State_m_GSI_get, _nfdrs4.NFDRS4State_m_GSI_set)
    m_nConsectiveSnowDays = property(_nfdrs4.NFDRS4State_m_nConsectiveSnowDays_get, _nfdrs4.NFDRS4State_m_nConsectiveSnowDays_set)
    m_lastUtcUpdateTime = property(_nfdrs4.NFDRS4State_m_lastUtcUpdateTime_get, _nfdrs4.NFDRS4State_m_lastUtcUpdateTime_set)
    m_lastDailyUpdateTime = property(_nfdrs4.NFDRS4State_m_lastDailyUpdateTime_get, _nfdrs4.NFDRS4State_m_lastDailyUpdateTime_set)
    m_qPrecip = property(_nfdrs4.NFDRS4State_m_qPrecip_get, _nfdrs4.NFDRS4State_m_qPrecip_set)
    m_qHourlyPrecip = property(_nfdrs4.NFDRS4State_m_qHourlyPrecip_get, _nfdrs4.NFDRS4State_m_qHourlyPrecip_set)
    m_qHourlyTemp = property(_nfdrs4.NFDRS4State_m_qHourlyTemp_get, _nfdrs4.NFDRS4State_m_qHourlyTemp_set)
    m_qHourlyRH = property(_nfdrs4.NFDRS4State_m_qHourlyRH_get, _nfdrs4.NFDRS4State_m_qHourlyRH_set)

# Register NFDRS4State in _nfdrs4:
_nfdrs4.NFDRS4State_swigregister(NFDRS4State)

class CFuelModelParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.CFuelModelParams_swiginit(self, _nfdrs4.new_CFuelModelParams(*args))
    __swig_destroy__ = _nfdrs4.delete_CFuelModelParams

    def getFuelModel(self) -> "char":
        return _nfdrs4.CFuelModelParams_getFuelModel(self)

    def getDescription(self) -> "char const *":
        return _nfdrs4.CFuelModelParams_getDescription(self)

    def getSG1(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSG1(self)

    def getSG10(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSG10(self)

    def getSG100(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSG100(self)

    def getSG1000(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSG1000(self)

    def getSGHerb(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSGHerb(self)

    def getSGWood(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSGWood(self)

    def getL1(self) -> "double":
        return _nfdrs4.CFuelModelParams_getL1(self)

    def getL10(self) -> "double":
        return _nfdrs4.CFuelModelParams_getL10(self)

    def getL100(self) -> "double":
        return _nfdrs4.CFuelModelParams_getL100(self)

    def getL1000(self) -> "double":
        return _nfdrs4.CFuelModelParams_getL1000(self)

    def getLHerb(self) -> "double":
        return _nfdrs4.CFuelModelParams_getLHerb(self)

    def getLWood(self) -> "double":
        return _nfdrs4.CFuelModelParams_getLWood(self)

    def getDepth(self) -> "double":
        return _nfdrs4.CFuelModelParams_getDepth(self)

    def getMXD(self) -> "int":
        return _nfdrs4.CFuelModelParams_getMXD(self)

    def getHD(self) -> "int":
        return _nfdrs4.CFuelModelParams_getHD(self)

    def getSCM(self) -> "int":
        return _nfdrs4.CFuelModelParams_getSCM(self)

    def getLDrought(self) -> "double":
        return _nfdrs4.CFuelModelParams_getLDrought(self)

    def getWNDFC(self) -> "double":
        return _nfdrs4.CFuelModelParams_getWNDFC(self)

    def setFuelModel(self, fm: "char") -> "void":
        return _nfdrs4.CFuelModelParams_setFuelModel(self, fm)

    def setDescription(self, description: "char const *") -> "void":
        return _nfdrs4.CFuelModelParams_setDescription(self, description)

    def setSG1(self, sg1: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSG1(self, sg1)

    def setSG10(self, sg10: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSG10(self, sg10)

    def setSG100(self, sg100: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSG100(self, sg100)

    def setSG1000(self, sg1000: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSG1000(self, sg1000)

    def setSGHerb(self, sgHerb: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSGHerb(self, sgHerb)

    def setSGWood(self, sgWood: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSGWood(self, sgWood)

    def setL1(self, l1: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setL1(self, l1)

    def setL10(self, l10: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setL10(self, l10)

    def setL100(self, l100: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setL100(self, l100)

    def setL1000(self, l1000: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setL1000(self, l1000)

    def setLHerb(self, lHerb: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setLHerb(self, lHerb)

    def setLWood(self, lWood: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setLWood(self, lWood)

    def setDepth(self, depth: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setDepth(self, depth)

    def setMXD(self, mxd: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setMXD(self, mxd)

    def setHD(self, hd: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setHD(self, hd)

    def setSCM(self, scm: "int") -> "void":
        return _nfdrs4.CFuelModelParams_setSCM(self, scm)

    def setLDrought(self, ldrought: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setLDrought(self, ldrought)

    def setWNDFC(self, wndfc: "double") -> "void":
        return _nfdrs4.CFuelModelParams_setWNDFC(self, wndfc)

# Register CFuelModelParams in _nfdrs4:
_nfdrs4.CFuelModelParams_swigregister(CFuelModelParams)

class NFDRS4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.NFDRS4_swiginit(self, _nfdrs4.new_NFDRS4(*args))
    __swig_destroy__ = _nfdrs4.delete_NFDRS4

    def CreateFuelModels(self) -> "void":
        return _nfdrs4.NFDRS4_CreateFuelModels(self)

    def Init(self, Lat: "double", FuelModel: "char", SlopeClass: "int", AvgAnnPrecip: "double", LT: "bool", Cure: "bool", isAnnual: "bool", kbdiThreshold: "int", RegObsHour: "int"=13, isReinit: "bool"=False) -> "void":
        return _nfdrs4.NFDRS4_Init(self, Lat, FuelModel, SlopeClass, AvgAnnPrecip, LT, Cure, isAnnual, kbdiThreshold, RegObsHour, isReinit)

    def Update(self, *args) -> "void":
        return _nfdrs4.NFDRS4_Update(self, *args)

    def UpdateDaily(self, Year: "int", Month: "int", Day: "int", Julian: "int", Temp: "double", MinTemp: "double", MaxTemp: "double", RH: "double", MinRH: "double", pcp24: "double", WS: "double", fMC1: "double", fMC10: "double", fMC100: "double", fMC1000: "double", fuelTemp: "double", SnowDay: "bool") -> "void":
        return _nfdrs4.NFDRS4_UpdateDaily(self, Year, Month, Day, Julian, Temp, MinTemp, MaxTemp, RH, MinRH, pcp24, WS, fMC1, fMC10, fMC100, fMC1000, fuelTemp, SnowDay)

    def iSetFuelModel(self, cFM: "char") -> "bool":
        return _nfdrs4.NFDRS4_iSetFuelModel(self, cFM)

    def iSetFuelMoistures(self, fMC1: "double", fMC10: "double", fMC100: "double", fMC1000: "double", fMCWood: "double", fMCHerb: "double", fuelTempC: "double") -> "int":
        return _nfdrs4.NFDRS4_iSetFuelMoistures(self, fMC1, fMC10, fMC100, fMC1000, fMCWood, fMCHerb, fuelTempC)

    def iCalcIndexes(self, iWS: "int", iSlopeCls: "int", fSC: "double *", fERC: "double *", fBI: "double *", fIC: "double *", fGSI: "double"=-999, fKBDI: "double"=-999) -> "int":
        return _nfdrs4.NFDRS4_iCalcIndexes(self, iWS, iSlopeCls, fSC, fERC, fBI, fIC, fGSI, fKBDI)

    def iCalcKBDI(self, fPrecipAmt: "double", iMaxTemp: "int", fCummPrecip: "double", iYKBDI: "int", fAvgPrecip: "double") -> "int":
        return _nfdrs4.NFDRS4_iCalcKBDI(self, fPrecipAmt, iMaxTemp, fCummPrecip, iYKBDI, fAvgPrecip)

    def Cure(self, fGSI: "double"=-999, fGreenupThreshold: "double"=0.5, fGSIMax: "double"=1.0) -> "double":
        return _nfdrs4.NFDRS4_Cure(self, fGSI, fGreenupThreshold, fGSIMax)

    def SetGSIParams(self, MaxGSI: "double", GreenupThreshold: "double", TminMin: "double"=-2.0, TminMax: "double"=5.0, VPDMin: "double"=900, VPDMax: "double"=4100, DaylMin: "double"=36000, DaylMax: "double"=39600, MAPeriod: "unsigned int"=21, UseVPDAvg: "bool"=False, nPrecipDays: "unsigned int"=30, rtPrecipMin: "double"=0.5, rtPrecipMax: "double"=1.5, UseRTPrecip: "bool"=False) -> "void":
        return _nfdrs4.NFDRS4_SetGSIParams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip)

    def SetHerbGSIparams(self, MaxGSI: "double", GreenupThreshold: "double", TminMin: "double"=-2.0, TminMax: "double"=5.0, VPDMin: "double"=900, VPDMax: "double"=4100, DaylMin: "double"=36000, DaylMax: "double"=39600, MAPeriod: "unsigned int"=21, UseVPDAvg: "bool"=False, nPrecipDays: "unsigned int"=30, rtPrecipMin: "double"=0.5, rtPrecipMax: "double"=1.5, UseRTPrecip: "bool"=False, herbMin: "double"=30.0, herbMax: "double"=250.0) -> "void":
        return _nfdrs4.NFDRS4_SetHerbGSIparams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip, herbMin, herbMax)

    def SetWoodyGSIparams(self, MaxGSI: "double", GreenupThreshold: "double", TminMin: "double"=-2.0, TminMax: "double"=5.0, VPDMin: "double"=900, VPDMax: "double"=4100, DaylMin: "double"=36000, DaylMax: "double"=39600, MAPeriod: "unsigned int"=21, UseVPDAvg: "bool"=False, nPrecipDays: "unsigned int"=30, rtPrecipMin: "double"=0.5, rtPrecipMax: "double"=1.5, UseRTPrecip: "bool"=False, woodyMin: "double"=60.0, woodyMax: "double"=200.0) -> "void":
        return _nfdrs4.NFDRS4_SetWoodyGSIparams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip, woodyMin, woodyMax)

    def SetOneHourParams(self, radius: "double", adsorptionRate: "double", maxLocalMoisture: "double", stickDensity: "double", desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_SetOneHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetTenHourParams(self, radius: "double", adsorptionRate: "double", maxLocalMoisture: "double", stickDensity: "double", desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_SetTenHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetHundredHourParams(self, radius: "double", adsorptionRate: "double", maxLocalMoisture: "double", stickDensity: "double", desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_SetHundredHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetThousandHourParams(self, radius: "double", adsorptionRate: "double", maxLocalMoisture: "double", stickDensity: "double", desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_SetThousandHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def Set1HourRadius(self, radius: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1HourRadius(self, radius)

    def Set1HourAdsorptionRate(self, adsorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1HourAdsorptionRate(self, adsorptionRate)

    def Set1HourStickDensity(self, stickDensity: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1HourStickDensity(self, stickDensity)

    def Set1HourMaxLocalMoisture(self, maxLocalMoisture: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set1HourDesorptionRate(self, desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1HourDesorptionRate(self, desorptionRate)

    def Set10HourRadius(self, radius: "double") -> "void":
        return _nfdrs4.NFDRS4_Set10HourRadius(self, radius)

    def Set10HourAdsorptionRate(self, adsorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set10HourAdsorptionRate(self, adsorptionRate)

    def Set10HourStickDensity(self, stickDensity: "double") -> "void":
        return _nfdrs4.NFDRS4_Set10HourStickDensity(self, stickDensity)

    def Set10HourMaxLocalMoisture(self, maxLocalMoisture: "double") -> "void":
        return _nfdrs4.NFDRS4_Set10HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set10HourDesorptionRate(self, desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set10HourDesorptionRate(self, desorptionRate)

    def Set100HourRadius(self, radius: "double") -> "void":
        return _nfdrs4.NFDRS4_Set100HourRadius(self, radius)

    def Set100HourAdsorptionRate(self, adsorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set100HourAdsorptionRate(self, adsorptionRate)

    def Set100HourStickDensity(self, stickDensity: "double") -> "void":
        return _nfdrs4.NFDRS4_Set100HourStickDensity(self, stickDensity)

    def Set100HourMaxLocalMoisture(self, maxLocalMoisture: "double") -> "void":
        return _nfdrs4.NFDRS4_Set100HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set100HourDesorptionRate(self, desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set100HourDesorptionRate(self, desorptionRate)

    def Set1000HourRadius(self, radius: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1000HourRadius(self, radius)

    def Set1000HourAdsorptionRate(self, adsorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1000HourAdsorptionRate(self, adsorptionRate)

    def Set1000HourStickDensity(self, stickDensity: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1000HourStickDensity(self, stickDensity)

    def Set1000HourMaxLocalMoisture(self, maxLocalMoisture: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1000HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set1000HourDesorptionRate(self, desorptionRate: "double") -> "void":
        return _nfdrs4.NFDRS4_Set1000HourDesorptionRate(self, desorptionRate)

    def SetStartKBDI(self, sKBDI: "int") -> "void":
        return _nfdrs4.NFDRS4_SetStartKBDI(self, sKBDI)

    def GetStartKBDI(self) -> "int":
        return _nfdrs4.NFDRS4_GetStartKBDI(self)

    def SetSCMax(self, maxSC: "int") -> "void":
        return _nfdrs4.NFDRS4_SetSCMax(self, maxSC)

    def GetSCMax(self) -> "int":
        return _nfdrs4.NFDRS4_GetSCMax(self)

    def SetMXD(self, mxd: "int") -> "void":
        return _nfdrs4.NFDRS4_SetMXD(self, mxd)

    def GetMXD(self) -> "int":
        return _nfdrs4.NFDRS4_GetMXD(self)

    def GetFuelTemperature(self) -> "double":
        return _nfdrs4.NFDRS4_GetFuelTemperature(self)

    def GetXDaysPrecipitation(self, nDays: "int") -> "double":
        return _nfdrs4.NFDRS4_GetXDaysPrecipitation(self, nDays)

    def ReadState(self, fileName: "std::string") -> "bool":
        return _nfdrs4.NFDRS4_ReadState(self, fileName)

    def SaveState(self, fileName: "std::string") -> "bool":
        return _nfdrs4.NFDRS4_SaveState(self, fileName)

    def LoadState(self, state: "NFDRS4State") -> "bool":
        return _nfdrs4.NFDRS4_LoadState(self, state)
    nPrecipQueueDays = property(_nfdrs4.NFDRS4_nPrecipQueueDays_get)
    nHoursPerDay = property(_nfdrs4.NFDRS4_nHoursPerDay_get)

    def GetMinTemp(self) -> "double":
        return _nfdrs4.NFDRS4_GetMinTemp(self)

    def GetMaxTemp(self) -> "double":
        return _nfdrs4.NFDRS4_GetMaxTemp(self)

    def GetMinRH(self) -> "double":
        return _nfdrs4.NFDRS4_GetMinRH(self)

    def GetPcp24(self) -> "double":
        return _nfdrs4.NFDRS4_GetPcp24(self)

    def AddCustomFuel(self, fmParams: "CFuelModelParams") -> "void":
        return _nfdrs4.NFDRS4_AddCustomFuel(self, fmParams)
    CTA = property(_nfdrs4.NFDRS4_CTA_get, _nfdrs4.NFDRS4_CTA_set)
    Lat = property(_nfdrs4.NFDRS4_Lat_get, _nfdrs4.NFDRS4_Lat_set)
    NFDRSVersion = property(_nfdrs4.NFDRS4_NFDRSVersion_get, _nfdrs4.NFDRS4_NFDRSVersion_set)
    YesterdayJDay = property(_nfdrs4.NFDRS4_YesterdayJDay_get, _nfdrs4.NFDRS4_YesterdayJDay_set)
    SlopeClass = property(_nfdrs4.NFDRS4_SlopeClass_get, _nfdrs4.NFDRS4_SlopeClass_set)
    OneHourFM = property(_nfdrs4.NFDRS4_OneHourFM_get, _nfdrs4.NFDRS4_OneHourFM_set)
    TenHourFM = property(_nfdrs4.NFDRS4_TenHourFM_get, _nfdrs4.NFDRS4_TenHourFM_set)
    HundredHourFM = property(_nfdrs4.NFDRS4_HundredHourFM_get, _nfdrs4.NFDRS4_HundredHourFM_set)
    ThousandHourFM = property(_nfdrs4.NFDRS4_ThousandHourFM_get, _nfdrs4.NFDRS4_ThousandHourFM_set)
    HerbFM = property(_nfdrs4.NFDRS4_HerbFM_get, _nfdrs4.NFDRS4_HerbFM_set)
    WoodyFM = property(_nfdrs4.NFDRS4_WoodyFM_get, _nfdrs4.NFDRS4_WoodyFM_set)
    FuelModel = property(_nfdrs4.NFDRS4_FuelModel_get, _nfdrs4.NFDRS4_FuelModel_set)
    FuelDescription = property(_nfdrs4.NFDRS4_FuelDescription_get, _nfdrs4.NFDRS4_FuelDescription_set)
    SG1 = property(_nfdrs4.NFDRS4_SG1_get, _nfdrs4.NFDRS4_SG1_set)
    SG10 = property(_nfdrs4.NFDRS4_SG10_get, _nfdrs4.NFDRS4_SG10_set)
    SG100 = property(_nfdrs4.NFDRS4_SG100_get, _nfdrs4.NFDRS4_SG100_set)
    SG1000 = property(_nfdrs4.NFDRS4_SG1000_get, _nfdrs4.NFDRS4_SG1000_set)
    SGWOOD = property(_nfdrs4.NFDRS4_SGWOOD_get, _nfdrs4.NFDRS4_SGWOOD_set)
    SGHERB = property(_nfdrs4.NFDRS4_SGHERB_get, _nfdrs4.NFDRS4_SGHERB_set)
    W1 = property(_nfdrs4.NFDRS4_W1_get, _nfdrs4.NFDRS4_W1_set)
    W10 = property(_nfdrs4.NFDRS4_W10_get, _nfdrs4.NFDRS4_W10_set)
    W100 = property(_nfdrs4.NFDRS4_W100_get, _nfdrs4.NFDRS4_W100_set)
    W1000 = property(_nfdrs4.NFDRS4_W1000_get, _nfdrs4.NFDRS4_W1000_set)
    WWOOD = property(_nfdrs4.NFDRS4_WWOOD_get, _nfdrs4.NFDRS4_WWOOD_set)
    WHERB = property(_nfdrs4.NFDRS4_WHERB_get, _nfdrs4.NFDRS4_WHERB_set)
    WDROUGHT = property(_nfdrs4.NFDRS4_WDROUGHT_get, _nfdrs4.NFDRS4_WDROUGHT_set)
    W1P = property(_nfdrs4.NFDRS4_W1P_get, _nfdrs4.NFDRS4_W1P_set)
    WHERBP = property(_nfdrs4.NFDRS4_WHERBP_get, _nfdrs4.NFDRS4_WHERBP_set)
    WTOT = property(_nfdrs4.NFDRS4_WTOT_get, _nfdrs4.NFDRS4_WTOT_set)
    L1 = property(_nfdrs4.NFDRS4_L1_get, _nfdrs4.NFDRS4_L1_set)
    L10 = property(_nfdrs4.NFDRS4_L10_get, _nfdrs4.NFDRS4_L10_set)
    L100 = property(_nfdrs4.NFDRS4_L100_get, _nfdrs4.NFDRS4_L100_set)
    L1000 = property(_nfdrs4.NFDRS4_L1000_get, _nfdrs4.NFDRS4_L1000_set)
    LWOOD = property(_nfdrs4.NFDRS4_LWOOD_get, _nfdrs4.NFDRS4_LWOOD_set)
    LHERB = property(_nfdrs4.NFDRS4_LHERB_get, _nfdrs4.NFDRS4_LHERB_set)
    LDROUGHT = property(_nfdrs4.NFDRS4_LDROUGHT_get, _nfdrs4.NFDRS4_LDROUGHT_set)
    DroughtUnit = property(_nfdrs4.NFDRS4_DroughtUnit_get, _nfdrs4.NFDRS4_DroughtUnit_set)
    fctCur = property(_nfdrs4.NFDRS4_fctCur_get, _nfdrs4.NFDRS4_fctCur_set)
    DEPTH = property(_nfdrs4.NFDRS4_DEPTH_get, _nfdrs4.NFDRS4_DEPTH_set)
    WNDFC = property(_nfdrs4.NFDRS4_WNDFC_get, _nfdrs4.NFDRS4_WNDFC_set)
    MXD = property(_nfdrs4.NFDRS4_MXD_get, _nfdrs4.NFDRS4_MXD_set)
    HD = property(_nfdrs4.NFDRS4_HD_get, _nfdrs4.NFDRS4_HD_set)
    SCM = property(_nfdrs4.NFDRS4_SCM_get, _nfdrs4.NFDRS4_SCM_set)
    MC1 = property(_nfdrs4.NFDRS4_MC1_get, _nfdrs4.NFDRS4_MC1_set)
    MC10 = property(_nfdrs4.NFDRS4_MC10_get, _nfdrs4.NFDRS4_MC10_set)
    MC100 = property(_nfdrs4.NFDRS4_MC100_get, _nfdrs4.NFDRS4_MC100_set)
    MC1000 = property(_nfdrs4.NFDRS4_MC1000_get, _nfdrs4.NFDRS4_MC1000_set)
    MCWOOD = property(_nfdrs4.NFDRS4_MCWOOD_get, _nfdrs4.NFDRS4_MCWOOD_set)
    MCHERB = property(_nfdrs4.NFDRS4_MCHERB_get, _nfdrs4.NFDRS4_MCHERB_set)
    BI = property(_nfdrs4.NFDRS4_BI_get, _nfdrs4.NFDRS4_BI_set)
    ERC = property(_nfdrs4.NFDRS4_ERC_get, _nfdrs4.NFDRS4_ERC_set)
    SC = property(_nfdrs4.NFDRS4_SC_get, _nfdrs4.NFDRS4_SC_set)
    IC = property(_nfdrs4.NFDRS4_IC_get, _nfdrs4.NFDRS4_IC_set)
    PrevYear = property(_nfdrs4.NFDRS4_PrevYear_get, _nfdrs4.NFDRS4_PrevYear_set)
    KBDI = property(_nfdrs4.NFDRS4_KBDI_get, _nfdrs4.NFDRS4_KBDI_set)
    YKBDI = property(_nfdrs4.NFDRS4_YKBDI_get, _nfdrs4.NFDRS4_YKBDI_set)
    StartKBDI = property(_nfdrs4.NFDRS4_StartKBDI_get, _nfdrs4.NFDRS4_StartKBDI_set)
    KBDIThreshold = property(_nfdrs4.NFDRS4_KBDIThreshold_get, _nfdrs4.NFDRS4_KBDIThreshold_set)
    CummPrecip = property(_nfdrs4.NFDRS4_CummPrecip_get, _nfdrs4.NFDRS4_CummPrecip_set)
    AvgPrecip = property(_nfdrs4.NFDRS4_AvgPrecip_get, _nfdrs4.NFDRS4_AvgPrecip_set)
    UseLoadTransfer = property(_nfdrs4.NFDRS4_UseLoadTransfer_get, _nfdrs4.NFDRS4_UseLoadTransfer_set)
    UseCuring = property(_nfdrs4.NFDRS4_UseCuring_get, _nfdrs4.NFDRS4_UseCuring_set)
    SnowCovered = property(_nfdrs4.NFDRS4_SnowCovered_get, _nfdrs4.NFDRS4_SnowCovered_set)
    WTMCD = property(_nfdrs4.NFDRS4_WTMCD_get, _nfdrs4.NFDRS4_WTMCD_set)
    WTMCL = property(_nfdrs4.NFDRS4_WTMCL_get, _nfdrs4.NFDRS4_WTMCL_set)
    WTMCDE = property(_nfdrs4.NFDRS4_WTMCDE_get, _nfdrs4.NFDRS4_WTMCDE_set)
    WTMCLE = property(_nfdrs4.NFDRS4_WTMCLE_get, _nfdrs4.NFDRS4_WTMCLE_set)
    FuelTemperature = property(_nfdrs4.NFDRS4_FuelTemperature_get, _nfdrs4.NFDRS4_FuelTemperature_set)
    m_GSI = property(_nfdrs4.NFDRS4_m_GSI_get, _nfdrs4.NFDRS4_m_GSI_set)
    nConsectiveSnowDays = property(_nfdrs4.NFDRS4_nConsectiveSnowDays_get, _nfdrs4.NFDRS4_nConsectiveSnowDays_set)
    m_regObsHour = property(_nfdrs4.NFDRS4_m_regObsHour_get, _nfdrs4.NFDRS4_m_regObsHour_set)
    utcHourDiff = property(_nfdrs4.NFDRS4_utcHourDiff_get, _nfdrs4.NFDRS4_utcHourDiff_set)
    lastUtcUpdateTime = property(_nfdrs4.NFDRS4_lastUtcUpdateTime_get, _nfdrs4.NFDRS4_lastUtcUpdateTime_set)
    lastDailyUpdateTime = property(_nfdrs4.NFDRS4_lastDailyUpdateTime_get, _nfdrs4.NFDRS4_lastDailyUpdateTime_set)
    qPrecip = property(_nfdrs4.NFDRS4_qPrecip_get, _nfdrs4.NFDRS4_qPrecip_set)
    qHourlyPrecip = property(_nfdrs4.NFDRS4_qHourlyPrecip_get, _nfdrs4.NFDRS4_qHourlyPrecip_set)
    qHourlyTemp = property(_nfdrs4.NFDRS4_qHourlyTemp_get, _nfdrs4.NFDRS4_qHourlyTemp_set)
    qHourlyRH = property(_nfdrs4.NFDRS4_qHourlyRH_get, _nfdrs4.NFDRS4_qHourlyRH_set)
    mapFuels = property(_nfdrs4.NFDRS4_mapFuels_get, _nfdrs4.NFDRS4_mapFuels_set)

# Register NFDRS4 in _nfdrs4:
_nfdrs4.NFDRS4_swigregister(NFDRS4)

class UTCTimeException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.UTCTimeException_swiginit(self, _nfdrs4.new_UTCTimeException(*args))
    __swig_destroy__ = _nfdrs4.delete_UTCTimeException

    def what(self) -> "std::string const &":
        return _nfdrs4.UTCTimeException_what(self)

# Register UTCTimeException in _nfdrs4:
_nfdrs4.UTCTimeException_swigregister(UTCTimeException)

class bad_time_init(UTCTimeException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _nfdrs4.bad_time_init_swiginit(self, _nfdrs4.new_bad_time_init())
    __swig_destroy__ = _nfdrs4.delete_bad_time_init

# Register bad_time_init in _nfdrs4:
_nfdrs4.bad_time_init_swigregister(bad_time_init)

class bad_time(UTCTimeException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _nfdrs4.bad_time_swiginit(self, _nfdrs4.new_bad_time())
    __swig_destroy__ = _nfdrs4.delete_bad_time

# Register bad_time in _nfdrs4:
_nfdrs4.bad_time_swigregister(bad_time)

class invalid_date(UTCTimeException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg: "std::string const &"):
        _nfdrs4.invalid_date_swiginit(self, _nfdrs4.new_invalid_date(msg))
    __swig_destroy__ = _nfdrs4.delete_invalid_date

# Register invalid_date in _nfdrs4:
_nfdrs4.invalid_date_swigregister(invalid_date)


def validate_date(year: "int const", month: "int const", day: "int const", hour: "int const", minute: "int const", second: "int const") -> "bool":
    return _nfdrs4.validate_date(year, month, day, hour, minute, second)

def get_day_diff() -> "Time64_T":
    return _nfdrs4.get_day_diff()

def get_hour_diff() -> "Time64_T":
    return _nfdrs4.get_hour_diff()

def get_sec_diff() -> "Time64_T":
    return _nfdrs4.get_sec_diff()

def tm_compare(first: "TM const &", second: "TM const &") -> "int":
    return _nfdrs4.tm_compare(first, second)

def tm_intraday_secs_diff(first: "TM const &", second: "TM const &") -> "int":
    return _nfdrs4.tm_intraday_secs_diff(first, second)

def is_leap_year(year: "int const") -> "bool":
    return _nfdrs4.is_leap_year(year)

def tm_increment_day(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_increment_day(changing_tm, quantity)

def tm_increment_hour(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_increment_hour(changing_tm, quantity)

def tm_increment_minute(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_increment_minute(changing_tm, quantity)

def tm_increment_second(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_increment_second(changing_tm, quantity)

def tm_decrement_day(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_decrement_day(changing_tm, quantity)

def tm_decrement_hour(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_decrement_hour(changing_tm, quantity)

def tm_decrement_minute(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_decrement_minute(changing_tm, quantity)

def tm_decrement_second(changing_tm: "TM *", quantity: "int const"=1) -> "TM *":
    return _nfdrs4.tm_decrement_second(changing_tm, quantity)

def check_utc_timestamp(check_time: "Time64_T const", secs_diff: "int &", year: "int const", month: "int const", day: "int const", hour: "int const", minute: "int const", second: "int const") -> "bool":
    return _nfdrs4.check_utc_timestamp(check_time, secs_diff, year, month, day, hour, minute, second)

def get_utc_timestamp(year: "int const", month: "int const", day: "int const", hour: "int const", minute: "int const", second: "int const") -> "Time64_T":
    return _nfdrs4.get_utc_timestamp(year, month, day, hour, minute, second)

def get_utc_timestamp_sec_diff(check_time: "Time64_T const", year: "int const", month: "int const", day: "int const", hour: "int const", minute: "int const", second: "int const") -> "int":
    return _nfdrs4.get_utc_timestamp_sec_diff(check_time, year, month, day, hour, minute, second)
class UTCTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs4.UTCTime_swiginit(self, _nfdrs4.new_UTCTime(*args))

    def get_tm(self) -> "TM":
        return _nfdrs4.UTCTime_get_tm(self)

    def time_string(self) -> "std::string":
        return _nfdrs4.UTCTime_time_string(self)

    def time_string_inet(self) -> "std::string":
        return _nfdrs4.UTCTime_time_string_inet(self)

    def timestamp(self) -> "Time64_T":
        return _nfdrs4.UTCTime_timestamp(self)

    def __lt__(self, rhs: "UTCTime") -> "bool":
        return _nfdrs4.UTCTime___lt__(self, rhs)

    def __ge__(self, rhs: "UTCTime") -> "bool":
        return _nfdrs4.UTCTime___ge__(self, rhs)

    def __gt__(self, rhs: "UTCTime") -> "bool":
        return _nfdrs4.UTCTime___gt__(self, rhs)

    def __le__(self, rhs: "UTCTime") -> "bool":
        return _nfdrs4.UTCTime___le__(self, rhs)

    def __eq__(self, rhs: "UTCTime") -> "bool":
        return _nfdrs4.UTCTime___eq__(self, rhs)

    def __ne__(self, rhs: "UTCTime") -> "bool":
        return _nfdrs4.UTCTime___ne__(self, rhs)

    def __sub__(self, rhs: "UTCTime") -> "double":
        return _nfdrs4.UTCTime___sub__(self, rhs)
    __swig_destroy__ = _nfdrs4.delete_UTCTime

# Register UTCTime in _nfdrs4:
_nfdrs4.UTCTime_swigregister(UTCTime)



